{"version":3,"sources":["Header.js","AddContact.js","serviceWorker.js","ShowContacts.js","PhoneBook.js","index.js"],"names":["Header","props","className","style","textAlign","padding","textTransform","background","color","header","AddContact","inputChangedHandler","e","state","target","name","value","setState","onFormSubmitted","a","preventDefault","id","phone","dob","email","fetch","method","headers","body","JSON","stringify","response","getContacts","console","log","error","message","history","push","onSubmit","this","bind","htmlFor","type","onChange","alignSelf","width","height","viewBox","fill","xmlns","fillRule","d","Component","Boolean","window","location","hostname","match","ShowContacts","onDeletedClick","contactID","query","substr","searchedContacts","contactsList","filter","contact","toLowerCase","indexOf","marginTop","placeholder","updateSearch","fontSize","marginBottom","map","sub","key","data-toggle","data-target","aria-expanded","aria-controls","onClick","aria-labelledby","data-parent","to","PhoneBook","json","jsonData","exact","path","render","deleteSuscriberHandler","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.9b92fc9d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = function (props) {\r\n    \r\n    const headerStyle = {\r\n        textAlign: 'center',\r\n        padding: 20,\r\n        textTransform: 'uppercase',\r\n        background: '#000',\r\n        color: '#fff'\r\n    };\r\n    return (\r\n        <div className='header' style={headerStyle}>\r\n            {props.header}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header","import React, { Component } from 'react';\r\nimport Header from './Header'\r\nimport './App.css';\r\nimport './public/icons/icons.svg'\r\n\r\n\r\nclass AddContact extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      id: 0,\r\n      name: '',\r\n      dob: '',\r\n      phone: '',\r\n      email: ''\r\n    }\r\n  }\r\n\r\n  inputChangedHandler = e => {\r\n    const state = this.state\r\n    state[e.target.name] = e.target.value;\r\n    this.setState(state)\r\n  }\r\n\r\n  onFormSubmitted = async (e) => {\r\n    e.preventDefault()\r\n    //this.props.addSuscriberHandler(this.state)\r\n    this.setState({ id: 0, name: '', phone: '' , dob: '' , email: '' })\r\n    const state = this.state\r\n    state[e.target.name] = e.target.value;\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/contacts\",{\r\n        method :\"POST\",\r\n        headers: {\"Content-Type\" : \"application/json\"},\r\n        body : JSON.stringify(state)\r\n      })\r\n      this.props.getContacts()\r\n      console.log(response)\r\n    } catch (error) {\r\n      console.error(error.message);\r\n    }\r\n    this.props.history.push('/')\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header header=\"Add Contact\" />\r\n        <div className=\"container\">\r\n          <div className=\"container\" style={{ background: '#7a7b7b', padding: '40px' }}>\r\n            <form onSubmit = {this.onFormSubmitted.bind(this)}>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"contact-name\">Name</label>\r\n                <input type=\"text\" className=\"form-control\" name=\"name\" id=\"contact-name\" onChange={this.inputChangedHandler}/>\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"dob\">DOB</label>\r\n                <input type=\"date\" className=\"form-control\" name=\"dob\" id=\"dob\" onChange={this.inputChangedHandler}/>\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"mobile-number\">Mobile Number</label>\r\n                <div className=\"row\">\r\n                  <div className=\"col-11\"><input type=\"number\" name=\"phone\" className=\"form-control\" id=\"mobile-number\" onChange={this.inputChangedHandler}/></div>\r\n                  <div className=\"col-1\" style={{ alignSelf: 'center' }}><svg className=\"bi bi-plus-circle-fill\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <path fillRule=\"evenodd\" d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8.5 4a.5.5 0 0 0-1 0v3.5H4a.5.5 0 0 0 0 1h3.5V12a.5.5 0 0 0 1 0V8.5H12a.5.5 0 0 0 0-1H8.5V4z\" />\r\n                  </svg></div>\r\n                </div>\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"email\">Email</label>\r\n                <div className=\"row\">\r\n                  <div className=\"col-11\"><input type=\"email\" name=\"email\"className=\"form-control\" id=\"email\" onChange={this.inputChangedHandler}/></div>\r\n                  <div className=\"col-1\" style={{ alignSelf: 'center' }}><svg className=\"bi bi-plus-circle-fill\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <path fillRule=\"evenodd\" d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8.5 4a.5.5 0 0 0-1 0v3.5H4a.5.5 0 0 0 0 1h3.5V12a.5.5 0 0 0 1 0V8.5H12a.5.5 0 0 0 0-1H8.5V4z\" />\r\n                  </svg></div>\r\n                </div>\r\n              </div>\r\n\r\n              <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddContact;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\r\nimport Header from './Header';\r\nimport { Link } from 'react-router-dom'\r\n\r\nclass ShowContacts extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            query : '',\r\n        };\r\n        \r\n    }\r\n    \r\n    updateSearch(e){\r\n        const state = this.state;\r\n        state[e.target.name] = e.target.value.substr(0,20);\r\n        this.setState(state)\r\n        //console.log(this.state)\r\n    }\r\n\r\n    onDeletedClick = contactID => {\r\n        //this.props.deleteSuscriberHandler(contactID)\r\n    }\r\n\r\n    \r\n    render() {\r\n        let searchedContacts = this.props.contactsList.filter(contact => contact.name.toLowerCase().indexOf(this.state.query.toLowerCase()) !== -1 )\r\n        return (\r\n            <div>\r\n                <Header header={\"Phone Book\"}></Header>\r\n                <div className=\"container\" style={{ marginTop: '30px' }}>\r\n                    <input className=\"form-control\" type=\"text\"  placeholder=\"Search\" name = \"query\"onChange={this.updateSearch.bind(this)} style={{ padding: '25px', fontSize: '1.15rem', marginBottom: '20px' }} />\r\n                    <div className=\"accordion\" id=\"accordionExample\">\r\n                        {searchedContacts.map(sub => {\r\n                            {console.log(sub)}\r\n                            return <div className=\"card\" key = {sub.id}>\r\n                                <div className=\"card-header\" id=\"headingOne\">\r\n                                    <h2 className=\"mb-0\">\r\n                                        <div className=\"btn btn-link btn-block text-left collapsed\" type=\"button\" data-toggle=\"collapse\" data-target={`#collapse${sub.id}`} aria-expanded=\"false\" aria-controls={`collapse${sub.id}`}>\r\n                                            <div className=\"row\" >\r\n                                                <div className=\"col-11\" style={{ alignSelf: 'center' }}><h5>{sub.name}</h5></div>\r\n                                                <div className=\"col-1\"><button type=\"button\" className=\"btn btn-danger\" onClick={this.onDeletedClick.bind(this, (sub.id))}>Delete</button></div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </h2>\r\n                                </div>\r\n\r\n                                <div id={`collapse${sub.id}`} className=\"collapse\" aria-labelledby=\"headingOne\" data-parent=\"#accordionExample\">\r\n                                    <div className=\"card-body\">\r\n                                        <h6>DOB:- {sub.dob.substr(0,10)}</h6>\r\n                                        <div className=\"row\">\r\n                                            <div className=\"col-6\"><h6>Mobile Number</h6></div>\r\n                                            <div className=\"col-6\"><h6>Email</h6></div>\r\n                                        </div>\r\n                                        <div className=\"row\">\r\n                                            <div className=\"col-6\">{sub.phone}</div>\r\n                                            <div className=\"col-6\">{sub.email}</div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        })}\r\n                    </div>\r\n                    <Link to=\"/add\"><button type=\"button\" className=\"btn btn-success\" style={{ marginTop: '20px' }}>Add</button></Link>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ShowContacts;","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport ShowContacts from './ShowContacts';\r\nimport AddContact from './AddContact';\r\n\r\nclass PhoneBook extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            contactsList: []\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getContacts();\r\n    }\r\n    getContacts = async () => {\r\n        try {\r\n            console.log(\"Running1\")\r\n            const response = await fetch(\"http://localhost:5000/contacts\");\r\n            const jsonData = await response.json();\r\n            console.log(jsonData);\r\n            this.setState({ contactsList: jsonData })\r\n        } catch (error) {\r\n            console.error(error.message)\r\n        }\r\n    }\r\n    \r\n    // deleteSuscriberHandler = (id) => {\r\n    //     let subscribersList = this.state.subscriberList\r\n    //     let subscriberIndex = 0\r\n    //     subscribersList.forEach(function (subscriber, index) {\r\n    //         if (subscriber.id === id) {\r\n    //             subscriberIndex = index\r\n    //         }\r\n    //     }, this)\r\n\r\n    //     subscribersList.splice(subscriberIndex, 1)\r\n    //     this.setState({ subscriberList: subscribersList })\r\n    // }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Router>\r\n                    <div className=\"main-container\">\r\n                        <Route exact path='/' render={(props) => <ShowContacts {...props} contactsList={this.state.contactsList} deleteSuscriberHandler={this.deleteSuscriberHandler} />} />\r\n                        <Route exact path='/add' render={({ history }, props) => <AddContact history={history} {...props} getContacts={this.getContacts} />} />\r\n                    </div>\r\n                </Router>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhoneBook;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AddContact from './AddContact';\nimport * as serviceWorker from './serviceWorker';\nimport ShowContacts from './ShowContacts';\nimport PhoneBook from './PhoneBook';\n\nReactDOM.render(\n  <React.StrictMode>\n    <PhoneBook />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}